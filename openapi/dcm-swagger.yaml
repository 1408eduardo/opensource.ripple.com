openapi: 3.0.3
info:
  description: >
    ### Introduction

    This document contains details about the REST resources available in the DCM (Digital Currency Manager) application,
    along with additional descriptions as to the responsibilities of each resource.

    ### High Level Overview

    The DCM application is responsible for managing users, accounts and payments related to the issuance of a currency
    on the XRP Ledger. These constructs are used to provision objects on the XRP ledger for both creating, storing and
    disbursing the created currency, managing users with varying permissions of how to disburse those funds, and
    gating the types of records that are created on the XRP Ledger to conform with the conditions necessary to make
    this possible (creation of accounts with multiple signers, disposal of the master key, trust lines between accounts,
    etc).

    The DCM also has the responsibility of making sure that interactions with the XRP Ledger reach a finalized state,
    meaning that the validators agree that the transaction sent to the ledger was successfully applied. This introduces
    some asynchronous behaviors in the application since the response returned from a transaction sent to the ledger is
    not representative of guaranteed success or failure. The application does the heavy lifting of interpreting this
    state for the user without requiring direct polling of the ledger.

    #### WorkItems

    The application uses an abstraction called a WorkItem to represent its interactions with the XRP Ledger. The
    reason for this is that the XRP Ledger has many different types of transactions for different types of mutations.
    Since the application knows how to translate the interactions the user has with it into the types of transactions
    necessary to get the desired state on the ledger, the rest of the user input required is limited to signing the
    transaction bytes (which are a child of a WorkItem). Since the differences between the transactions are immaterial
    to the end user by virtue of the application exposing resources to create the intended effect in transaction form,
    they're reduced to a single representation known to clients as WorkItem which can be either signed or
    multi-signed depending on what's required, sent to and eventually finalized on the ledger.
  version: '1.0'
  title: DCM API Documentation
  termsOfService: urn:tos
  contact: {}
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
tags:
  - name: Account Setup
    description: >
      ### Description

      Resources used for setting up new `CbdcAccount` records via following all of the steps provided. These steps are
      dynamic in nature and controlled by the server, returned in a canonical order of precedence.

      ### Usage

      An `AccountSetup` is created first, which contains metadata about the account (name, currency, signers) that is
      used to create an account and its associated settings on the XRP Ledger. These steps involve the following but
      may be subject to change over time:

      * Adding a public key to associate with the account on the ledger.

      * Detecting that the account is funded.

      * Setting up the signers and trust lines, as well as updating account settings, in a way that is compatible with
      the application.


      This workflow is coordinated by repeatedly fetching the next step involved, waiting for it to be ready to
      interact with, completing the step (either by submitted the data requested or signing the bytes for an XRPL
      transaction), and then polling to see if there's another step to complete after that one is finished or if the
      setup is complete.
  - name: CBDC Accounts
    description: >
      ### Description

      Retrieve CBDC Accounts as any authenticated user. This resource is limited to read-only operations as operations
      that would mutate the state of an account are restricted to system admins only.
  - name: Admin
    description: >
      ### Description

      Perform administrative actions such as user creation, user keypair creation and external account onboarding. This
      resource is only available to users with a system administrator role.
  - name: External Accounts
    description: >
      ### Description

      Manage external accounts, which are used to disburse funds outside of accounts that are controlled by the
      application.
  - name: External Xumm Accounts
    description: >
      ### Description

      Manage accounts that are controlled by Xumm, a wallet solution based on a mobile application. This functionality
      is currently only available in sandbox environments.
  - name: External Xumm Payments
    description: >
      ### Description

      Handles making payments to external accounts controlled by the Xumm wallet. This functionality is currently not
      available in production environments.
  - name: WorkItems
    description: >
      ### Description

      A WorkItem represents a set of one or more XRPL transactions that can be signed and submitted to the XRP Ledger.


      **Note**: Due to constraints on the XRP Ledger, only one WorkItem can be available to
      receive signatures per account at a time.


      Each WorkItem progresses through the same state machine:

      ##### QUEUED

      All WorkItems start in the QUEUED state. In this state, a WorkItem cannot be signed and the fields
      contained within its transactions are not yet final. Because only one WorkItem can be in progress for
      a given account at one time, all WorkItems for an account that are not active or final will remain
      in the QUEUED state until the WorkItem preceding it reaches a final state. The order by which WorkItems
      are moved from QUEUED to PENDING_SIGNATURES is determined by the time they were created.

      ##### PENDING_SIGNATURES

      PENDING_SIGNATURES is the next state after QUEUED, unless the WorkItem was cancelled before moving to this
      state. In this state, the WorkItem's transaction fields are final and the WorkItem is ready to
      be signed by all approvers. The WorkItem remains in this state until quorum has been reached, which
      can be achieved by adding signatures to the WorkItem, or until the WorkItem is cancelled.

      ##### READY_FOR_SUBMISSION

      Once a quorum of signatures has been reached on a given WorkItem, the WorkItem transitions from the
      PENDING_SIGNATURES state to the READY_FOR_SUBMISSION state. Once the WorkItem is in the READY_FOR_SUBMISSION
      state, its transactions can be submitted to the XRP Ledger, or it can be cancelled.

      ##### SUBMITTED

      Once a WorkItem's transactions have been submitted to the XRP Ledger, the WorkItem enters the SUBMITTED state.
      The DCM watches the XRP Ledger to determine when the transaction becomes final. WorkItems can no longer
      be cancelled once they enter the SUBMITTED state.

      ##### COMPLETE

      A WorkItem in the COMPLETE state has had its transactions accepted, validated, and executed on the XRP Ledger,
      meaning the WorkItem successfully completed.

      ##### FAILED

      WorkItems enter the FAILED state when their transactions fail to be validated on the XRP Ledger.

      ##### EXPIRED

      WorkItems whose transactions have expired, meaning their `last_ledger_sequence` has passed on the XRP Ledger,
      enter the EXPIRED state and will never complete successfully.

      ##### CANCELLED

      WorkItems can be cancelled when they are in the QUEUED, PENDING_SIGNATURES, and READY_FOR_SUBMISSION states.
      Cancellation of a WorkItem results in a WorkItem in the CANCELLED state. WorkItem cancellation cannot be reversed.

      ### Types of WorkItems

      #### Payment Request

      Send a Payment from one account to another. Payment requests encompass all types of payments, including minting,
      destroying, and transferring currency between accounts.

      #### Global Freeze

      Enact or disable a global freeze on your issued currency. Use this resource if you need to freeze or unfreeze
      movement of funds in all accounts in a given tenant. This is typically used used for some type of emergency
      situation where serious concerns about a compromised key, state actor, or other risk may provoke a response from
      the tenant's administrators to lock down the system.

      #### Individual Freeze

      Enact or disable a freeze on a specific account.

      Use this resource if you need to freeze or unfreeze movement of funds in an individual account. Typically this
      would be used either for some type of emergency situation where that account was somehow compromised, or if the
      account in question needed to be locked down due to some administrative reason like an audit.

  - name: OAuth
    description: >
      ### Description

      Handles interactions with OAuth providers, typically Auth0.

      ### Usage

      This resource is responsible for managing client interactions with the OAuth provider used for authentication,
      which will typically be Auth0. This includes the initial series of redirects involved in OAuth flows by providing
      a way to navigate to the OAuth provider without the client needing specific configuration beyond knowing how to
      communicate with this application, as well as handling various flows where the OAuth provider either needs
      requests handling in this application to complete and/or client id and secret information to validate.
  - name: Server Details
    description: >
      ### Description

      Returns basic details about the server for diagnostic purposes.
  - name: Tenants
    description: >
      ### Description

      Handles tenant level interactions.

      ### Usage

      This resource is capable of creating new tenants in the system, as well as logging out specific users or all users
      in a given tenant.
  - name: Users
    description: >
      ### Description

      Handles read-only use cases for fetching `User` information. Operations that would mutate data are restricted to
      system admins only.
  - name: Xumm Webhooks
    description: >
      ### Description

      Provides a callback from the Xumm wallet to handle the flow of adding a Xumm account. Currently disabled in
      production environments.
paths:
  '/':
    get:
      tags:
        - Server Details
      summary: Retrieve metadata about this server
      description: Returns basic details about the server for diagnostic purposes.
      operationId: getServerSettingsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerSettings'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/account-edits":
    get:
      tags:
      - Account Edits
      summary: getAccountEdits
      description: Returns pages of AccountEdits.
      operationId: getAccountEditsUsingGET
      parameters:
        - $ref: '#/components/parameters/pageParameter'
        - $ref: '#/components/parameters/sizeParameter'
        - $ref: '#/components/parameters/sortParameter'
        - name: hasWorkItem
          in: query
          description: hasWorkItem
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Page<AccountEditSummary>"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
      - Account Edits
      summary: createAccountEdit
      description: Create an AccountEdit and save it on the server.
      operationId: createAccountEditUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAccountEdit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountEdit'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/account-edits/{editId}":
    get:
      tags:
      - Account Edits
      summary: getAccountEdit
      description: Retrieve an AccountEdit based on the given EditId.
      operationId: getAccountEditUsingGET
      parameters:
        - name: editId
          in: path
          description: The unique ID of `AccountEdit`.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountEdit'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
      - Account Edits
      summary: submitAccountEditWorkItem
      operationId: submitAccountEditWorkItemUsingPOST
      parameters:
        - name: editId
          in: path
          description: The unique ID of `AccountEdit`.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountEdit'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
      - Account Edits
      summary: cancelAccountEdit
      operationId: cancelAccountEditUsingDELETE
      parameters:
        - name: editId
          in: path
          description: The unique ID of `AccountEdit`.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountEdit'
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  "/account-edits/{editId}/transactions/{transactionId}/signatures/{signatureId}":
    post:
      tags:
      - Account Edits
      summary: requestMultiSignature
      operationId: requestMultiSignatureUsingPOST
      parameters:
        - name: editId
          in: path
          description: The unique ID of `AccountEdit`.
          required: true
          schema:
            type: string
            format: uuid
        - name: signatureId
          in: path
          description: The UUID of the `WorkItemTransactionSignature`.
          required: true
          schema:
            type: string
            format: uuid
        - name: transactionId
          in: path
          description: The UUID of the `WorkItemTransaction`.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/account-edits/{editId}/transactions/{transactionId}/signatures/{signatureId}/signature":
    put:
      tags:
      - Account Edits
      summary: addMultiSignature
      operationId: addMultiSignatureUsingPUT
      parameters:
        - name: editId
          in: path
          description: The unique ID of `AccountEdit`.
          required: true
          schema:
            type: string
            format: uuid
        - name: signatureId
          in: path
          description: The UUID of the `WorkItemTransactionSignature`.
          required: true
          schema:
            type: string
            format: uuid
        - name: transactionId
          in: path
          description: The UUID of the `WorkItemTransaction`.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountEditSignature'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountEditSignature'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/account-setups':
    get:
      tags:
        - Account Setup
      summary: Get AccountSetups
      description: >
        Loads all currently active `AccountSetup` objects, each of which corresponds to an account that is currently in
        the process of being configured by the creator.
      operationId: getAccountSetupsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountSetup'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/account-setups/faucet':
    get:
      tags:
        - Account Setup
      summary: Get FaucetStatus
      description: >
        Provides details as to whether or not a faucet is available to disburse funds to an account. Used in
        non-production environments to fund accounts automatically and without an explicitly defined external source of
        XRP.
      operationId: getFaucetStatusUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaucetStatus'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/account-setups/fund':
    post:
      tags:
        - Account Setup
      summary: Fund Account Via Faucet
      description: >
        Adds funds to the account specified by the `address` in the `FaucetFundingRequest` assuming that the faucet is
        enabled.
      operationId: fundAccountUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FaucetFundingRequest'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/account-setups/junkyard':
    get:
      tags:
        - Account Setup
      summary: Get Account Setup Address Junkyard
      description: >
        Returns addresses known to not work as accounts due to not meeting preconditions needed (i.e. can't already
        exist in the system, can't have a preexisting signer list, etc). No explicit reason is given for why any of the
        addresses are deemed unusable; this information exists to avoid a poor user experience.
      operationId: getJunkyardUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountLedgerInfo'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/account-setups/{accountId}':
    get:
      tags:
        - Account Setup
      summary: Get AccountSetup
      description: >
        Returns information for a specific `AccountSetup` object in order for the configuration of that account to be
        displayed and for progress to continue.
      operationId: getAccountSetupUsingGET
      parameters:
        - name: accountId
          in: path
          description: The unique ID of the `AccountSetup`.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSetup'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    put:
      tags:
        - Account Setup
      summary: Create AccountSetup
      description: >
        Adds a new `AccountSetup` object which will be used to track progress when configuring an account on the
        system. Stores metadata entered by the user for the new account and is used to track progress for the various
        XRPL transactions required to render the account fit for use by the system.
      operationId: createAccountSetupUsingPUT
      parameters:
        - name: accountId
          in: path
          description: The unique ID of the `AccountSetup`.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAccountSetup'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - Account Setup
      summary: Delete AccountSetup
      description: >
        Deletes an `AccountSetup`. This may be used in the event that an in-flight setup is no longer necessary, or
        because an in-flight setup has failed in a way that is unrecoverable.
      operationId: deleteSetupUsingDELETE
      parameters:
        - name: accountId
          in: path
          description: The unique ID of the `AccountSetup`.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/account-setups/{accountId}/ledger-info':
    get:
      tags:
        - Account Setup
      summary: getAccountLedgerInfo
      description: >
        Get the AccountLedgerInfo for a given account setup. Included in the AccountLedgerInfo will be a public key 
        matching a private key managed and custodied by this application.
      operationId: getAccountLedgerInfoUsingGET
      parameters:
        - name: accountId
          in: path
          description: accountId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountLedgerInfo'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    put:
      tags:
        - Account Setup
      summary: Update AccountSetup Ledger Details
      description: >
        Updates the `AccountSetup` specified via the `accountId` path parameters with a public key used to create the
        account on the XRP ledger.
      operationId: updateAccountSetupLedgerDetailsUsingPUT
      parameters:
        - name: accountId
          in: path
          description: The unique ID of the `AccountSetup`.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountSetupLedgerDetails'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountLedgerInfo'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/account-setups/{accountId}/next':
    get:
      tags:
        - Account Setup
      summary: Next Step for AccountSetup
      description: >
        Retrieves the next step for setting up the account. The steps involved with setting up an account are designed
        to be dynamic in nature with the server being the authority on the type of step and canonical ordering in which
        they're completed rather than the client. The information returned provides a key used to get more detail about
        the next step to complete, as well as whether or not the next step is ready for interaction due to the
        requirement of having the XRPL transactions finalized before moving forward and the asynchronous nature of
        finalization.
      operationId: nextStepUsingGET
      parameters:
        - name: accountId
          in: path
          description: The unique ID of the `AccountSetup`.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSetupNextStep'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/account-setups/{accountId}/{name}':
    get:
      tags:
        - Account Setup
      summary: Get AccountSetupStep
      description: >
        Returns the `AccountSetupStep` as specified by the `name` in the path associated with the `AccountSetup`
        associated with the `accountId` in the path. These steps will often involve signing a transaction that will
        be submitted to the XRP Ledger.
      operationId: getAccountSetupStepUsingGET
      parameters:
        - name: accountId
          in: path
          description: The unique ID of the `AccountSetup`.
          required: true
          schema:
            type: string
            format: uuid
        - name: name
          in: path
          description: The name of the step to retrieve.
          required: true
          schema:
            type: string
            enum:
              - ledger-info
              - fund
              - set-flags
              - trust-set
              - signer-list-set
              - disable-master
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSetupStep'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/account-setups/{accountId}/{name}/signature':
    get:
      tags:
        - Account Setup
      summary: generateStepSignature
      description: >
        Generate a signature for a pending AccountSetupStep of the given type using the custodied master private key
        for the account. This feature is only enabled in sandbox.
      operationId: generateStepSignatureUsingGET
      parameters:
        - name: accountId
          in: path
          description: The ID of the account.
          required: true
          schema:
            type: string
            format: uuid
        - name: name
          in: path
          description: The freeform name of the account being modified.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSetupStepSignature'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    put:
      tags:
        - Account Setup
      summary: Sign AccountSetupStep
      description: >
        Submits a signature for the XRPL transaction associated with the `AccountSetupStep` that corresponds to the
        `name` and `accountId` in the path. For example, a transaction can be signed via a Ledger hardware device
        in the user interface, with the bytes generated by the device passed to this resource in the
        `AccountSetupStepSignature` entity in the request body.
      operationId: signStepUsingPUT
      parameters:
        - name: accountId
          in: path
          description: The unique ID of the `AccountSetup`.
          required: true
          schema:
            type: string
            format: uuid
        - name: name
          in: path
          description: The name of the step to sign.
          required: true
          schema:
            type: string
            enum:
              - ledger-info
              - fund
              - set-flags
              - trust-set
              - signer-list-set
              - disable-master
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountSetupStepSignature'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/admin/cbdcAccounts':
    get:
      tags:
        - Admin
      summary: Get all CBDC Accounts
      description: >
        Returns all `CbdcAccount`s in the system including information about the signers and trust lines associated with
        those account. This resource will be somewhat slow due to having to make multiple round trips to the XRP
        Ledger to retrieve details where the ledger is the source of truth (which is the case for signers and
        trust lines).
      operationId: getCbdcAccountsUsingGET_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CbdcAccount'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/admin/cbdcAccounts/{address}':
    get:
      tags:
        - Admin
      summary: Get a CBDC Account by address
      description: Retrives details for an individual `CbdcAccount` based on the `address` from the path.
      operationId: getCbdcAccountUsingGET
      parameters:
        - name: address
          in: path
          description: The XRPL Address of the account to get
          example: r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CbdcAccount'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/admin/cbdcAccounts/{address}/metadata':
    get:
      tags:
        - Admin
      summary: Get CBDC Account Metadata by account address
      description: >
        Retrieves a `CbdcAccountMetadata` object for the `address` specified in the path, which only contains
        information stored within the application and does not fetch data from the XRP Ledger.
      operationId: getCbdcAccountMetadataUsingGET
      parameters:
        - name: address
          in: path
          description: The XRPL Address of the account to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CbdcAccountMetadata'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/admin/users':
    get:
      tags:
        - Admin
      summary: Get all users
      description: Returns all the `User`s in the system.
      operationId: getUsersUsingGET
      parameters:
        - $ref: '#/components/parameters/pageParameter'
        - $ref: '#/components/parameters/sizeParameter'
        - $ref: '#/components/parameters/sortParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page<UserAndKeyPairs>'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/admin/users/{userId}':
    get:
      tags:
        - Admin
      summary: Get a user by ID
      operationId: getUserUsingGET
      parameters:
        - name: userId
          in: path
          description: The unique ID of the `User` to get.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAndKeyPairs'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    put:
      tags:
        - Admin
      summary: Create a new User
      description: >
        Creates a new `User` in the system based on the details provided in the `NewUser` submitted in the response
        body. This also triggers creation of the user in the third party authentication management system (currently
        Auth0) which controls handling the welcome email, password reset, and MFA configuration.
      operationId: createUserUsingPUT
      parameters:
        - name: userId
          in: path
          description: A client generated UUID that will be the unique ID of the new `User`.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAndKeyPairs'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/admin/users/{userId}/keypairs':
    post:
      tags:
        - Admin
      summary: Create a new UserKeyPair
      description: >
        Creates a new `UserKeyPair` in the system in addition to the one created when the user was created. This allows
        an admin to specify different keys for different accounts for a single user when configuring the signers for
        those accounts.
      operationId: createUserKeyPairUsingPOST
      parameters:
        - name: userId
          in: path
          description: The unique ID of the `User` who will own the `UserKeyPair`.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserKeyPair'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserKeyPair'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/admin/users/{userId}/keypairs/{keyPairId}':
    put:
      tags:
        - Admin
      summary: Update a UserKeyPair
      description: >
        Allows an admin to update metadata fields of this resource, i.e. the name. Fields associated with the type of
        key, the identification of the key, or properties of the key on the ledger cannot be changed.
      operationId: updateUserKeyPairUsingPUT
      parameters:
        - name: userId
          in: path
          description: The ID of the `User` who owns the `UserKeyPair`.
          required: true
          schema:
            type: string
            format: uuid
        - name: keyPairId
          in: path
          description: A client generated UUID which will be the unique ID of the `UserKeyPair`.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserKeyPair'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserKeyPair'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/cbdcAccounts':
    get:
      tags:
        - CBDC Accounts
      summary: Get all CBDC Accounts
      description: >
        Returns all `CbdcAccount`s in the system including information about the signers and trust lines associated with
        those account. This resource will be somewhat slow due to having to make multiple round trips to the XRP
        Ledger to retrieve details where the ledger is the source of truth (which is the case for signers and
        trust lines).
      operationId: getCbdcAccountsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CbdcAccount'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/cbdcAccounts/external':
    get:
      tags:
        - External Xumm Accounts
      summary: Gets all external Xumm accounts for the current tenant.
      description: This resource is not enabled in DCM environments.
      operationId: getExternalCbdcAccountsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalXummAccount'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/cbdcAccounts/external/users/{username}':
    get:
      tags:
        - External Xumm Accounts
      summary: Gets all external Xumm accounts for a given username.
      description: This resource is not enabled in DCM environments.
      operationId: getExternalCbdcAccountForUserUsingGET
      parameters:
        - name: username
          in: path
          description: The email address of the `User` who owns the external XUMM accounts.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalXummAccount'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
        - External Xumm Accounts
      summary: Creates an external Xumm account under the given username.
      description: This resource is not enabled in DCM environments.
      operationId: createExternalCbdcAccountUsingPOST
      parameters:
        - name: username
          in: path
          description: The email address of the `User` who owns the external XUMM accounts.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewExternalXummAccount'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalXummAccount'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/cbdcAccounts/external/{accountId}':
    get:
      tags:
        - External Xumm Accounts
      summary: Gets an external Xumm account based on the given account id.
      description: This resource is not enabled in DCM environments.
      operationId: getExternalCbdcAccountUsingGET
      parameters:
        - name: accountId
          in: path
          description: The unique ID of the external XUMM account.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalXummAccount'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/cbdcAccounts/metadata':
    get:
      tags:
        - CBDC Accounts
      summary: Get CbdcAccountMetadata For All Accounts
      description: >
        Retrieves a `CbdcAccountMetadata` object for the `address` specified in the path, which only contains
        information stored within the application and does not fetch data from the XRP Ledger.
      operationId: getCbdcAccountsMetadataUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CbdcAccountMetadata'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/cbdcAccounts/tenant-wide-cbdc-account-balances':
    get:
      tags:
        - CBDC Accounts
      summary: Get Account Balances
      description: >
        Retrieves balance information for all accounts in the current tenant. This resource accesses a cache that is
        updated on a configurable interval by the server and contains the balances for all currencies on all trust lines
        for the accounts returned. Currently, this will only by one currency.
      operationId: getGlobalAccountBalancesUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantWideCbdcAccountBalances'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/external-accounts':
    get:
      tags:
        - External Accounts
      summary: Get all external accounts
      operationId: getExternalAccountsUsingGET
      parameters:
        - $ref: '#/components/parameters/pageParameter'
        - $ref: '#/components/parameters/sizeParameter'
        - $ref: '#/components/parameters/sortParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page<ExternalAccount>'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
        - External Accounts
      summary: Create an external account
      operationId: createExternalAccountUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewExternalAccount'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccount'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/external-accounts/{accountId}':
    put:
      tags:
        - External Accounts
      summary: Update an external account
      description: >
        Updates the field of the external account that are not associated with identification in the system
        or the ledger, such as the name, correlation id and status.
      operationId: updateExternalAccountUsingPUT
      parameters:
        - name: accountId
          in: path
          description: The unique ID of the external account.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalAccount'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccount'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/oauth/auth0/authorize':
    get:
      tags:
        - OAuth
      summary: Redirect Client To Auth0 Authorize Resource
      description: >
        Acts as the entrypoint for starting the Auth0 authorization code flow. Rather than require the client to know
        the details of the Auth0 tenant used by the server, the server will redirect the client to the appropriate URL
        for Auth0's authorize resource for the configured tenant.
      operationId: redirectToAuthorizeUsingGET
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/oauth/auth0/code':
    get:
      tags:
        - OAuth
      summary: Handle Auth0 Authorization Code Flow Request
      description: >
        Upon completing an Auth0 authorization code flow, Auth0 will redirect to this endpoint with the generated code,
        which is used by the server to validate the code against the currently configured Auth0 tenant in order to
        validate authentication. Upon success, a cryptographically secure session token is generated and written as a
        cookie to the client.
      operationId: auth0AuthCodeRedirectFlowUsingGET
      parameters:
        - name: code
          in: query
          description: A code for the Authorization Code flow to authenticate the user.
          required: true
          schema:
            type: string
      responses:
        '301':
          description: Sends the client the authentization cookie and redirects them back to the client side application.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/oauth/auth0/password':
    post:
      tags:
        - OAuth
      summary: Handle Auth0 Password Flow Request
      description: >
        Sends the username and password to the server which forwards it to the configured Auth0 tenant. This resource
        is only enabled in non-production environments and should generally just be used for automated cases where
        interacting with Auth0's authorization code flow resources is too difficult.
      operationId: auth0PasswordFlowUsingPOST
      parameters:
        - name: code
          in: query
          description: A code for the Authorization Code flow to authenticate the user.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthUsernamePassword'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                description: A cryptographically secure session token.
        '403':
          description: Forbidden
  '/tenants/{tenantId}':
    put:
      tags:
        - Tenants
      summary: Create a New Tenant
      description: >
        Creates a new tenant in the application and requires a secret value for authorization. This will also create
        the admin account required for creating records in the new tenant.
      operationId: createTenantUsingPUT
      parameters:
        - name: Authorization
          in: header
          description: The tenant authorization token. This is a static value that is configured on the server.
          required: true
          schema:
            type: string
        - name: tenantId
          in: path
          description: The unique ID of the `Tenant` to create.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTenantAndAdmin'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantAndAdmin'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/tenants/{tenantId}/salt':
    delete:
      tags:
        - Tenants
      summary: Reset Tenant Authentication Salt
      description: >
        Resets the salt value for the given tenant, resulting in all users for that tenant being logged out.
      operationId: resetSaltForTenantUsingDELETE
      parameters:
        - name: Authorization
          in: header
          description: The tenant authorization token. This is a static value that is configured on the server.
          required: true
          schema:
            type: string
        - name: tenantId
          in: path
          description: The unique ID of the `Tenant`.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/tenants/{tenantId}/users/{userId}/salt':
    delete:
      tags:
        - Tenants
      summary: Reset Tenant User Authentication Salt
      description: >
        Resets the salt value for a specific user in the given tenant, resulting in that user being logged out.
      operationId: resetSaltForTenantUserUsingDELETE
      parameters:
        - name: Authorization
          in: header
          description: The tenant authorization token. This is a static value that is configured on the server.
          required: true
          schema:
            type: string
        - name: tenantId
          in: path
          description: The unique ID of the `Tenant`.
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          description: The unique ID of the `User` whose salt is getting reset.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/users/me':
    get:
      tags:
        - Users
      summary: Get Current User
      description: >
        Returns details of the currently authenticated user.
      operationId: getMeUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAndKeyPairs'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/users/{userId}/user':
    get:
      tags:
        - Users
      summary: Get Individual User
      description: >
        Retrieves a specific user given the user id in the path.
      operationId: getUserUsingGET_1
      parameters:
        - name: userId
          in: path
          description: The unique ID of the `User` to get.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/webhooks/xumm':
    post:
      tags:
        - Xumm Webhooks
      summary: Handles callbacks from the Xumm API.
      description: This resource is not enabled in DCM environments.
      operationId: handleStatusUpdateUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayloadCallback'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/work-items/external-xumm-payments':
    get:
      tags:
        - External Xumm Payments
      summary: Retrieves all payments through Xumm associated with the authenticated user.
      description: This resource is not enabled in DCM environments.
      operationId: getXummPaymentsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalXummPayment'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/work-items/external-xumm-payments/{workItemId}':
    put:
      tags:
        - External Xumm Payments
      summary: Creates a Xumm payment based on data passed in from the authenticated user.
      description: This resource is not enabled in DCM environments.
      operationId: createPaymentUsingPUT
      parameters:
        - name: workItemId
          in: path
          description: The UUID of the external XUMM payment.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewExternalXummPayment'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalXummPayment'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/work-items/payments/{workItemId}':
    put:
      tags:
        - WorkItems
      summary: Create a Payment Request
      description: >
        Creates a request to sign a transaction to send a payment of issued currency from one account to another.
      operationId: createWorkItemUsingPUT_2
      parameters:
        - name: workItemId
          in: path
          description: The UUID of the WorkItem.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPaymentRequestParameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentWorkItem'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/work-items/global-freezes/{workItemId}':
    put:
      tags:
        - WorkItems
      summary: Create a Global Freeze/Unfreeze Request
      description: >
        Creates a request to sign a transaction to apply a global freeze or unfreeze to all XRP Ledger accounts connected
        to the tenant's issuer account via a trust line.
      operationId: createWorkItemUsingPUT
      parameters:
        - name: workItemId
          in: path
          description: The UUID of the WorkItem.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGlobalFreezeRequestParameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalFreezeWorkItem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/work-items/individual-freezes/{workItemId}':
    put:
      tags:
        - WorkItems
      summary: Create an Individual Freeze/Unfreeze Request
      description: >
        Creates a request to sign a transaction to freeze or unfreeze an XRP Ledger account connected
        to the tenant's issuer account via a trust line. The frozen account cannot send or receive any currency
        issued by the issuer account except to send money back to the issuer.
      operationId: createWorkItemUsingPUT_1
      parameters:
        - name: workItemId
          in: path
          description: The UUID of the WorkItem.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewIndividualFreezeRequestParameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualFreezeWorkItem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/work-items':
    get:
      tags:
        - WorkItems
      summary: Get a page of WorkItems
      description: >
        Retrieve a paged list of all WorkItems that the requesting user is a signer on.
        Results can be paged and sorted via query parameters, and can be filtered by the following types:
          * MINT
          * PAY_TO_OPERATIONAL
          * PAY_TO_STANDBY
          * PAY_TO_EXTERNAL
          * DESTROY
          * INDIVIDUAL_FREEZE
          * INDIVIDUAL_UNFREEZE
          * GLOBAL_FREEZE
          * GLOBAL_UNFREEZE
      operationId: getWorkItemsUsingGET
      parameters:
        - $ref: '#/components/parameters/pageParameter'
        - $ref: '#/components/parameters/sizeParameter'
        - $ref: '#/components/parameters/sortParameter'
        - name: type
          in: query
          description: The types of WorkItems to get, as a comma separated list.
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - MINT
                - PAY_TO_OPERATIONAL
                - PAY_TO_STANDBY
                - PAY_TO_EXTERNAL
                - DESTROY
                - INDIVIDUAL_FREEZE
                - INDIVIDUAL_UNFREEZE
                - GLOBAL_FREEZE
                - GLOBAL_UNFREEZE
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page<WorkItem>'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found

  '/work-items/{workItemId}':
    get:
      tags:
        - WorkItems
      summary: Get a WorkItem by ID
      description: Retrieve a WorkItem by its ID.
      operationId: getWorkItemUsingGET
      parameters:
        - name: workItemId
          in: path
          description: The UUID of the WorkItem.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PaymentWorkItem'
                  - $ref: '#/components/schemas/GlobalFreezeWorkItem'
                  - $ref: '#/components/schemas/IndividualFreezeWorkItem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
        - WorkItems
      summary: Submit WorkItem to the Ledger
      description: >
        Submit a WorkItem's transactions to the XRP Ledger. The transactions are not immediately committed
        to the XRP Ledger, so clients should poll the WorkItem to determine when it becomes final.
      operationId: submitWorkItemTransactionsUsingPOST
      parameters:
        - name: workItemId
          in: path
          description: The UUID of the WorkItem.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PaymentWorkItem'
                  - $ref: '#/components/schemas/GlobalFreezeWorkItem'
                  - $ref: '#/components/schemas/IndividualFreezeWorkItem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - WorkItems
      summary: Cancel a WorkItem
      description: >
        Cancel a WorkItem. WorkItems can only be cancelled when they are in one of the following states:
          - `QUEUED`
          - `PENDING_SIGNATURES`
          - `READY_FOR_SUBMISSION`
      operationId: cancelWorkItemUsingDELETE
      parameters:
        - name: workItemId
          in: path
          description: The UUID of the WorkItem.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PaymentWorkItem'
                  - $ref: '#/components/schemas/GlobalFreezeWorkItem'
                  - $ref: '#/components/schemas/IndividualFreezeWorkItem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/work-items/{workItemId}/transactions/{transactionId}/signatures/{signatureId}':
    post:
      tags:
        - WorkItems
      summary: Request a signature on a WorkItem's transaction.
      description: >
        **This resource is not enabled in DCM environments.**


        Requests a signature on a particular WorkItem's transaction using a keypair that is owned by the signed-in
        user but managed by Ripple's custody solution. Ripple's custody solution signs transactions asynchronously,
        so clients should poll the WorkItem to determine when the signature has been created and added, or if the request
        failed.
      operationId: requestMultiSignatureUsingPOST
      parameters:
        - name: signatureId
          in: path
          description: The UUID of the `WorkItemTransactionSignature`.
          required: true
          schema:
            type: string
            format: uuid
        - name: transactionId
          in: path
          description: The UUID of the `WorkItemTransaction`.
          required: true
          schema:
            type: string
            format: uuid
        - name: workItemId
          in: path
          description: The UUID of the WorkItem.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/work-items/{workItemId}/transactions/{transactionId}/signatures/{signatureId}/signature':
    put:
      tags:
        - WorkItems
      summary: Add a signature to a WorkItem's transaction
      description: >
        Add a signature to a given WorkItem's transaction. This endpoint should only be used when the keypair used to sign
        the transaction is not managed by Ripple.
      operationId: addMultiSignatureUsingPUT
      parameters:
        - name: signatureId
          in: path
          description: The UUID of the `WorkItemTransactionSignature`.
          required: true
          schema:
            type: string
            format: uuid
        - name: transactionId
          in: path
          description: The UUID of the `WorkItemTransaction`.
          required: true
          schema:
            type: string
            format: uuid
        - name: workItemId
          in: path
          description: The UUID of the WorkItem.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkItemSignature'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkItemSignature'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
components:
  parameters:
    pageParameter:
      name: page
      in: query
      description: >
        The page number to get. Pagination begins at 0. For example, to get the first page, set this
        parameter to `0`. To get page 25, set this parameter to `24`.
      required: false
      schema:
        type: integer
    sizeParameter:
      name: size
      in: query
      description: >
        The number of results to return in the page. Responses will contain at most this many results, but
        may return fewer.
      required: false
      schema:
        type: integer
    sortParameter:
      name: sort
      in: query
      description: >
        Field and direction to sort on. You can sort on multiple fields by specifying multiple `sort` query parameters, like `?sort=foo,DESC&sort=bar,ASC`
      schema:
        type: string
  schemas:
    AccountEdit:
      type: object
      title: AccountEdit
      description: An object containing edit information for a CBDC account.
      allOf:
        - $ref: '#/components/schemas/AccountEditSummary'
        - type: object
          properties:
            workItem:
              $ref: '#/components/schemas/WorkItem'
            stateChange:
              $ref: '#/components/schemas/AccountEditStateChange'
          required:
            - stateChange
    AccountEditSignature:
      type: object
      title: AccountEditSignature
      description: A wrapper for a Signature.
      properties:
        signature:
          description: The Base16 encoded signature of the AccountEdit WorkItem's transaction.
          type: string
          format: base16
      required:
        - signature
    AccountEditStateChange:
      type: object
      title: AccountEditStateChange
      description: A set of account state changes made by a given account edit.
      properties:
        nameChange:
          description: The object containing the account name before and after the edit.
          $ref: '#/components/schemas/AccountNameChange'
        signerListChanges:
          type: array
          description: The object containing the account signer list before and after the edit.
          items:
            $ref: '#/components/schemas/SignerListChanges'
          uniqueItems: true
        quorumChange:
          description: The object containing the account signer quorum before and after the edit.
          $ref: '#/components/schemas/QuorumChange'
    AccountNameChange:
      type: object
      description: Represents a change in an account's name.
      properties:
        previous:
          type: string
          description: The account name before the edit.
        proposed:
          type: string
          description: The account name after the edit.
      required:
        - previous
        - proposed
    SignerListChanges:
      type: object
      description: Represents a change in one of an account's signers.
      properties:
        signerUserId:
          type: string
          format: uuid
          description: The ID of the signer that changed in the signer list.
        previous:
          $ref: '#/components/schemas/Signer'
        proposed:
          $ref: '#/components/schemas/Signer'
      required:
        - signerUserId
    Signer:
      type: object
      description: An object containing information about a signer on signer list.
      properties:
        user:
          $ref: '#/components/schemas/User'
          description: The user associated with the signer information.
        keyPairId:
          description: The unique ID of this `UserKeyPair`.
          type: string
          format: uuid
        keyPairName:
          type: string
          description: The freeform text name of the keypair associated with this entity.
          example: Primary, Nano, etc.
        publicKey:
          type: string
          description: A Base16 encoded public key.
          example: EDBA8EC5A7F0681998A54C00AB4A9804D797B471102382A2CDFE45313E49807C6E
        address:
          type: string
          description: An XRPL address.
          example: r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu.
        signerWeight:
          type: integer
          description: The weight given to this signer's signature on transactions.
          format: uint32
          minimum: 1
          example: 1
      required:
        - user
        - keyPairId
        - keyPairName
        - publicKey
        - address
        - signerWeight
    QuorumChange:
      type: object
      title: QuorumChange
      description: Represents a change in an account's signer quorum.
      properties:
        previous:
          type: integer
          description: The account's signer quorum before the edit.
        proposed:
          type: integer
          description: The account's signer quorum after the edit.
      required:
        - previous
        - proposed
    AccountEditSummary:
      type: object
      title: AccountEditSummary
      description: An AccountEdit's metadata information.
      properties:
        id:
          description: The ID of this AccountEdit.
          type: string
          format: uuid
        tenantId:
          description: The ID of the tenant that the account belongs to.
          type: string
          format: uuid
        status:
          description: The status of an AccountEdit.
          type: string
          enum:
            - QUEUED
            - PENDING_SIGNATURES
            - READY_FOR_SUBMISSION
            - SUBMITTED
            - COMPLETE
            - FAILED
            - CANCELLED
            - EXPIRED
        cbdcAccountId:
          description: The unique ID of this account.
          type: string
          format: uuid
        requestSummary:
          description: The reason for creating this edit.
          type: string
        createdBy:
          description: The unique ID of the user that created the edit.
          type: string
          format: uuid
        createdAt:
          description: Date and time the account was created.
          type: string
          format: date-time
        updatedAt:
          description: Date and time the account was last updated.
          type: string
          format: date-time
        isNameChange:
          description: Whether the account edit has an account name change.
          type: boolean
        isSignerListChange:
          description: Whether the account edit has a change in the signer list.
          type: boolean
        isQuorumChange:
          description: Whether the account edit has a change in the account signer quorum.
          type: boolean
        weightedSignatureCount:
          description: The number of signatures * weight obtained so far to approve this account edit, if applicable.
          type: integer
        requiredQuorum:
          description: The cumulative weight of the signatures required to submit the edit, if applicable.
          type: integer
      required:
        - id
        - tenantId
        - status
        - cbdcAccountId
        - requestSummary
        - createdBy
        - createdAt
        - updatedAt
        - isNameChange
        - isSignerListChange
        - isQuorumChange
        - weightedSignatureCount
        - requiredQuorum
    NewAccountEdit:
      type: object
      description: The new proposed state of the CbdcAccount with the ability to hold the Name, SignerList, and Quorum change.
      properties:
        cbdcAccountId:
          description: The unique ID for this account.
          type: string
          format: uuid
        accountName:
          description: The new name for the account; optional if you are not changing the account name.
          type: string
        signerList:
          $ref: '#/components/schemas/NewAccountSignerList'
        requestSummary:
          description: The reason for creating this edit.
          type: string
      required:
        - cbdcAccountId
    AccountLedgerInfo:
      type: object
      title: AccountLedgerInfo
      description: An account's XRP Ledger information.
      properties:
        accountId:
          type: string
          format: uuid
          description: The account's ID.
        tenantId:
          type: string
          format: uuid
          description: The ID of the tenant that the account belongs to.
        publicKey:
          type: string
          description: A base16 encoded public key.
          example: EDBA8EC5A7F0681998A54C00AB4A9804D797B471102382A2CDFE45313E49807C6E
        address:
          type: string
          description: An XRPL address.
          example: r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu.
      required:
        - accountId
        - tenantId
        - publicKey
        - address
    AccountSetup:
      type: object
      title: AccountSetup
      description: Contains the details for setting up an account in the CBDC system.
      properties:
        accountId:
          type: string
          format: uuid
          description: The account's ID.
        signerList:
          $ref: '#/components/schemas/NewAccountSignerList'
        name:
          description: The name of the account.
          type: string
        currencyCode:
          description: The currency code that the account will either issue (if it is an Issuer account) or hold.
          type: string
        tickSize:
          description: >
            The [tick size](https://xrpl.org/ticksize.html#tick-size) that will be set on the account.
            This field is only present for Issuer account setups.
          type: integer
          format: uint32
        creatingAdminUserId:
          type: string
          format: uuid
          description: The User ID of the system administrator who created/is creating the account setup.
        issuerAccountId:
          type: string
          format: uuid
          description: >
            The account ID of the Issuer account that will be issuing the currency that this account will hold.
            Only present for non-Issuer account setups.
        accountType:
          type: string
          description: The type of account to set up.
          enum:
            - ISSUER
            - STANDBY
            - OPERATIONAL
        ledgerInfo:
          $ref: '#/components/schemas/AccountLedgerInfo'
      required:
        - accountId
        - signerList
        - name
        - currencyCode
        - creatingAdminUserId
        - accountType
    AccountSetupLedgerDetails:
      type: object
      title: AccountSetupLedgerDetails
      properties:
        publicKey:
          type: string
          description: A base16 encoded public key.
          example: EDBA8EC5A7F0681998A54C00AB4A9804D797B471102382A2CDFE45313E49807C6E
      required:
        - publicKey
    AccountSetupNextStep:
      type: object
      title: AccountSetupNextStep
      properties:
        type:
          type: string
          description: >
            The step type. The following is a description of each step:

            #### LEDGER_INFO

            The AccountSetup does not yet have the account's ledger details, namely its public key/address. To
            finish this step, the client must add the account's ledger details to the AccountSetup.

            #### FUND

            The account has not been funded with XRP and thus does not exist on ledger. To finish this step, XRP
            must be sent to the account.  It is recommended to send at least 50 XRP to any new accounts.

            #### SET_FLAGS

            This step sets various XRP Ledger account flags depending on the type of account.

            #### TRUST_SET

            This step creates a trust line between the account being set up and the Issuer account. This step is not
            included in Issuer account setups.

            #### SIGNER_LIST_SET

            This step sets a SignerList on the account, delegating transaction signing privileges to a quorum of signers.

            #### DISABLE_MASTER

            This step disables the account's master key. Once this step is complete, transactions for this account can
            only be committed to the ledger with a quorum of signatures by the account's SignerList.


            #### COMPLETING

            This step means that all required steps have been completed other than the `DISABLE_MASTER` step, which has
            been signed and submitted but has not yet been committed to the ledger.

            #### COMPLETED

            All steps for this AccountSetup have been completed.

          enum:
            - LEDGER_INFO
            - FUND
            - SET_FLAGS
            - TRUST_SET
            - SIGNER_LIST_SET
            - DISABLE_MASTER
            - COMPLETING
            - COMPLETED
        processing:
          type: boolean
          description: Indicates if the next step is in process.
        processingStatus:
          type: string
          description: Finer details state of the processing status of the step.
          enum:
            - NOT_READY
            - PROCESSING
            - READY
            - COMPLETE
      required:
        - type
        - processingStatus
    AccountSetupStep:
      type: object
      title: AccountSetupStep
      properties:
        type:
          type: string
          description: >
            The step type. The following is a description of each step:

            #### LEDGER_INFO

            The AccountSetup does not yet have the account's ledger details, namely its public key/address. To
            finish this step, the client must add the account's ledger details to the AccountSetup.

            #### FUND

            The account has not been funded with XRP and thus does not exist on ledger. To finish this step, XRP
            must be sent to the account.  It is recommended to send at least 50 XRP to any new accounts.

            #### SET_FLAGS

            This step sets various XRP Ledger account flags depending on the type of account.

            #### TRUST_SET

            This step creates a trust line between the account being set up and the Issuer account. This step is not
            included in Issuer account setups.

            #### SIGNER_LIST_SET

            This step sets a SignerList on the account, delegating transaction signing privileges to a quorum of signers.

            #### DISABLE_MASTER

            This step disables the account's master key. Once this step is complete, transactions for this account can
            only be committed to the ledger with a quorum of signatures by the account's SignerList.


            #### COMPLETING

            This step means that all required steps have been completed other than the `DISABLE_MASTER` step, which has
            been signed and submitted but has not yet been committed to the ledger.

            #### COMPLETED

            All steps for this AccountSetup have been completed.
          enum:
            - LEDGER_INFO
            - FUND
            - SET_FLAGS
            - TRUST_SET
            - SIGNER_LIST_SET
            - DISABLE_MASTER
            - COMPLETING
            - COMPLETED
        accountId:
          type: string
          format: uuid
          description: The account's ID.
        pendingWorkItem:
          $ref: '#/components/schemas/AccountSetupWorkItem'
        completedWorkItem:
          $ref: '#/components/schemas/AccountSetupWorkItem'
        processingWorkItem:
          $ref: '#/components/schemas/AccountSetupWorkItem'
        failedWorkItems:
          type: array
          description: A list of all WorkItems that have failed on this step for this `AccountSetup`.
          items:
            $ref: '#/components/schemas/AccountSetupWorkItem'
        processing:
          type: boolean
          description: Indicates if the next step is in process.
        processingStatus:
          type: string
          description: Finer details state of the processing status of the step.
          enum:
            - NOT_READY
            - PROCESSING
            - READY
            - COMPLETE
      required:
        - type
        - accountId
    AccountSetupStepSignature:
      type: object
      title: AccountSetupStepSignature
      properties:
        signature:
          description: The base16 encoded signature of the AccountSetupStep's WorkItem's transaction.
          type: string
          format: base16
      required:
        - signature
    CbdcAccountMetadata:
      type: object
      properties:
        cbdcAccountId:
          description: The unique ID of this account.
          type: string
          format: uuid
        address:
          type: string
          description: The XRPL Address of the account.
          example: r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu
        publicKey:
          type: string
          description: The Public Key of the account.
          example: 02C69C9DDEE86B0DC46DA4115709C96379E3A67D2026D5FAEE9C56F6E74490DA2B
        accountName:
          type: string
          description: The name of the account.
          example: Issuer Account
        accountType:
          type: string
          description: The account type.
          enum:
            - ISSUER
            - STANDBY
            - OPERATIONAL
          example: ISSUER
        currencyCode:
          type: string
          description: The currency code that this account issues. Only present for ISSUER accounts.
          example: USD
      required:
        - cbdcAccountId
        - address
        - publicKey
        - accountName
        - accountType
    CbdcAccount:
      type: object
      properties:
        cbdcAccountId:
          type: string
          format: uuid
          description: The CbdcAccount's ID.
        address:
          type: string
          description: The XRPL Address of the account.
          example: r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu
        publicKey:
          type: string
          description: The Public Key of the account.
          example: 02C69C9DDEE86B0DC46DA4115709C96379E3A67D2026D5FAEE9C56F6E74490DA2B
        accountName:
          type: string
          description: The name of the account.
          example: Issuer Account
        accountType:
          type: string
          description: The account type.
          enum:
            - ISSUER
            - STANDBY
            - OPERATIONAL
          example: ISSUER
        currencyCode:
          type: string
          description: The currency code that this account issues. Only present for ISSUER accounts.
          example: USD
        signerQuorum:
          type: integer
          description: The total weight of signatures required to authorize a transaction.
          example: 1
        signers:
          type: array
          description: A list of XRPL addresses who are included in the signing quorum for the account.
          items:
            $ref: '#/components/schemas/Signer'
        trustLines:
          type: array
          description: >
            A list of the Trustlines attached to the account. More detailed information on
            each field can be found in [the XRP Ledger documentation](https://xrpl.org/account_lines.html#response-format).
          items:
            $ref: '#/components/schemas/Trustline'
      required:
        - cbdcAccountId
        - address
        - publicKey
        - accountName
        - accountType
        - signerQuorum
        - signers
    Trustline:
      type: object
      description: >
        Represents a Trustline on the XRP Ledger between two accounts. More detailed information on
        each field can be found in [the XRP Ledger documentation](https://xrpl.org/account_lines.html#response-format).
      properties:
        account:
          type: string
        balance:
          type: string
        currency:
          type: string
        limit:
          type: string
        limitPeer:
          type: string
        qualityIn:
          type: integer
        qualityOut:
          type: integer
        noRipple:
          type: boolean
        noRipplePeer:
          type: boolean
        authorized:
          type: boolean
        peerAuthorized:
          type: boolean
        freeze:
          type: boolean
        freezePeer:
          type: boolean
      required:
        - account
        - balance
        - currency
        - limit
        - limitPeer
        - qualityIn
        - qualityOut
    ExternalAccount:
      type: object
      description: >
        Represents an XRP Ledger account owned by an entity other than the currency issuer in the CBDC Manager.
        XRP Ledger accounts owned by entities external to the issuer entity must be registered as ExternalAccounts
        in the CBDC Manager in order to distribute currency to the account.
      properties:
        accountId:
          description: The unique ID for this external account.
          type: string
          format: uuid
        createdBy:
          description: The ID of the DCM user who created this external account.
          type: string
          format: uuid
        address:
          type: string
          description: The XRPL Address of the external account.
          example: r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu
        destinationTag:
          type: integer
          format: uint32
          description: Destination tag of the XRPL Address
        accountName:
          type: string
          description: Name of the external account.
        correlationId:
          type: string
          description: >
            A free-form identifier which can be used to identify this external account in another system, such as a
            core banking ledger.
        status:
          description: Whether the external account is active or inactive.
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        createdAt:
          description: Date and time the account was created.
          type: string
          format: date-time
        updatedAt:
          description: Date and time the account was last updated.
          type: string
          format: date-time
      required:
        - accountId
        - createdBy
        - address
        - destinationTag
        - accountName
        - correlationId
        - status
        - createdAt
        - updatedAt
    ExternalXummAccount:
      type: object
      title: ExternalXummAccount
      description: >
        Represents an XRP Ledger account owned by an entity other than the currency issuer whose keys are held and managed by the XUMM wallet.
        XRP Ledger accounts owned by entities external to the issuer entity that are managed by the XUMM wallet must be registered as ExternalXummAccounts
        in the CBDC Manager in order to distribute currency to the account.


        ExternalXummAccounts are disabled in DCM environments.
      properties:
        accountId:
          type: string
          format: uuid
          description: The unique ID of the account.
        address:
          type: string
          description: The XRPL Address of the account.
          example: r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu
        accountName:
          type: string
          description: The name of the account.
        username:
          type: string
          description: The username of the owner of the account.
        status:
          type: string
          description: The status of the account.
        trustlineSetupUrl:
          description: >
            A URL that, when navigated to in a browser, displays a QR code that can be scanned by the account owner in the XUMM application
            to set up a trust line between the account and the issuer account.
          type: string
          format: httpurl
      required:
        - accountId
        - accountName
        - username
        - status
        - trustlineSetupUrl
    ExternalXummPayment:
      type: object
      title: ExternalXummPayment
      description: A payment from an ExternalXummAccount to another ExternalXummAccount.
      properties:
        paymentId:
          type: string
          format: uuid
          description: The unique ID of the payment.
        source:
          type: string
          description: The XRPL Address of the source account.
          example: r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu
        destination:
          type: string
          description: The XRPL Address of the destination account.
          example: r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu
        amount:
          type: integer
          description: The amount of currency to send to the destination account.
        status:
          type: string
          description: The status of the payment.
          enum:
            - PENDING
            - COMPLETED
            - CANCELED
            - EXPIRED
        xummRedirectUrl:
          type: string
          format: httpurl
          description: >
            An HTTP URL that, when navigated to in a browser, displays a QR code that can be scanned in by the sender in the XUMM application,
            which will complete a Payment transaction to the destination account.
        tenantId:
          type: string
          format: uuid
          description: The ID of the tenant that this payment belongs to.
        createdAt:
          type: string
          format: LocalDateTime
          description: The date and time that the payment was created.
      required:
        - paymentId
        - destination
        - amount
        - status
        - xummRedirectUrl
        - tenantId
        - createdAt
    FaucetFundingRequest:
      type: object
      title: FaucetFundingRequest
      description: Request object containing information necessary to fund an account on the XRP Ledger.
      properties:
        address:
          type: string
          description: An XRPL address to fund.
          example: r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu.
      required:
        - address
    FaucetStatus:
      type: object
      description: Whether or not an XRP faucet is enabled in a given environment. Currently, faucets are only enabled in Sandbox environments.
      properties:
        isEnabled:
          description: Returns `true` if a faucet is enabled, otherwise `false`.
          type: boolean
      title: FaucetStatus
    NewAccountSetup:
      type: object
      title: NewAccountSetup
      description: Parameters necessary to create a new AccountSetup.
      properties:
        signerList:
          $ref: '#/components/schemas/NewAccountSignerList'
        name:
          description: The name of the account to set up.
          type: string
        currencyCode:
          description: The currency code that the account will either issue or hold.
          type: string
        tickSize:
          description: >
            The [tick size](https://xrpl.org/ticksize.html#tick-size) that will be set on the account.
            This field is only present for Issuer account setups.
          type: integer
        issuerAccountId:
          description: >
            The account ID of the Issuer account that this account will be connected to via a trust line.
            Only present for non-Issuer accounts.
          type: string
          format: uuid
        accountType:
          description: The type of account to set up.
          type: string
          enum:
            - ISSUER
            - STANDBY
            - OPERATIONAL
      required:
        - signerList
        - name
        - currencyCode
        - accountType
    NewAccountSigner:
      type: object
      title: NewAccountSigner
      description: >
        A UserKeyPair that will be added as a signer to a CbdcAccount.
      properties:
        signerUserId:
          description: The ID of the user who will be the signer.
          type: string
          format: uuid
        signerKeyPairId:
          description: The ID of the keypair that the user will use to sign.
          type: string
          format: uuid
        signerWeight:
          description: The weight that this signer's signatures will hold in the account's signing quorum.
          type: integer
      required:
        - signerKeyPairId
        - signerUserId
        - signerWeight
    NewAccountSignerList:
      type: object
      title: NewAccountSignerList
      description: A list of signers and a minimum total signing weight (quorum) to set as the SignerList on-ledger for a CbdcAccount.
      properties:
        quorum:
          description: The minimum number of signatures, weighted by each signer's `signerWeight`, necessary to approve a transaction.
          type: integer
        signers:
          description: A list of the `NewAccountSigner`s to set as the CbdcAccount's SignerList.
          type: array
          items:
            $ref: '#/components/schemas/NewAccountSigner'
      required:
        - quorum
        - signers
    NewExternalAccount:
      type: object
      description: Properties necessary to create a new ExternalAccount.
      properties:
        address:
          type: string
          description: The XRPL Address of the external account.
          example: r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu
        destinationTag:
          type: integer
          description: Destination tag of the XRPL Address; defaults to 0
        accountName:
          type: string
          description: Name of the external account
        correlationId:
          type: string
          description: >
            A free-form identifier which can be used to identify this external account in another system, such as a
            core banking ledger.
      required:
        - address
        - accountName
        - correlationId
    NewExternalXummAccount:
      type: object
      title: NewExternalXummAccount
      description: Properties necessary to create a new ExternalXummAccount.
      properties:
        accountName:
          type: string
          description: The name of the account.
        trustlineAmount:
          type: integer
          format: uint64
          description: >
            The limit amount to set on the trustline that will be created between the ExternalXummAccount and the Issuer account.
            Defaults to `1000000`.
      required:
        - accountName
    NewExternalXummPayment:
      type: object
      title: NewExternalXummPayment
      description: Properties necessary to create a new ExternalXummPayment.
      properties:
        account:
          type: string
          description: The XRPL Address of the source account.
          example: r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu
        destination:
          type: string
          description: The XRPL Address of the destination account.
          example: r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu
        amount:
          type: integer
          description: The amount of currency to send in the payment.
      required:
        - account
        - destination
        - amount
    NewWorkItemParameters:
      type: object
      title: NewWorkItemParameters
      properties:
        sourceAccount:
          type: string
          description: 'The XRPL Address of the source account'
        lastLedgerSequenceOffset:
          type: integer
          format: uint32
          description: >
            The number of ledgers that the WorkItem's transaction will have to get validated on the XRP Ledger from the time
            that the WorkItem enters the `PENDING_SIGNATURES` state. If the transaction is not validated within this number of ledgers,
            it never will be. This field is analagous to an "expiration" on the WorkItem, where time is denoted by a number of ledgers.
      required:
        - sourceAccount
    NewGlobalFreezeRequestParameters:
      type: object
      title: NewGlobalFreezeRequestParameters
      description: Parameters necessary to create a Global Freeze/Unfreeze request.
      allOf:
        - $ref: '#/components/schemas/NewWorkItemParameters'
        - type: object
          properties:
            workItemType:
              description: The type of WorkItem to create.
              type: string
              enum:
                - GLOBAL_FREEZE
                - GLOBAL_UNFREEZE
          required:
            - workItemType
    NewIndividualFreezeRequestParameters:
      type: object
      title: NewIndividualFreezeRequestParameters
      description: Parameters necessary to create an Individual Freeze/Unfreeze request.
      allOf:
        - $ref: '#/components/schemas/NewWorkItemParameters'
        - type: object
          properties:
            workItemType:
              type: string
              description: The type of WorkItem to create.
              enum:
                - INDIVIDUAL_FREEZE
                - INDIVIDUAL_UNFREEZE
            counterpartyAddress:
              type: string
              description: The XRPL Address to freeze
          required:
            - workItemType
            - counterpartyAddress
    NewPaymentRequestParameters:
      type: object
      title: NewPaymentRequestParameters
      description: Parameters necessary to create a Payment request.
      allOf:
        - $ref: '#/components/schemas/NewWorkItemParameters'
        - type: object
          properties:
            workItemType:
              type: string
              description: The type of WorkItem to create.
              enum:
                - MINT
                - PAY_TO_OPERATIONAL
                - PAY_TO_EXTERNAL
                - PAY_TO_STANDBY
                - DESTROY
            destinationAccount:
              type: string
              description: The XRPL account to send the payment to.
            amount:
              type: integer
              format: uint64
              description: The amount of currency to send.
            currencyCode:
              type: string
              description: >
                The currency code of the currency to send. Because each tenant can only have one issuer account
                per currency code, only this field is required to determine which issuer's currency to send in the payment.
          required:
            - workItemType
            - destinationAccount
            - amount
            - currencyCode
    NewTenantAndAdmin:
      type: object
      title: NewTenantAndAdmin
      description: A new Tenant and Chief Admin User to add when creating a new tenant.
      properties:
        tenant:
          $ref: '#/components/schemas/Tenant'
        admin:
          $ref: '#/components/schemas/NewUser'
      required:
        - tenant
        - admin
    NewUser:
      type: object
      description: Properties necessary to create a new User in the CBDC Manager.
      properties:
        firstName:
          description: 'The user''s first name'
          type: string
        lastName:
          description: 'The user''s last name'
          type: string
        username:
          description: 'The user''s email address'
          type: string
          format: email
        authorities:
          description: A list of roles to give to the user
          type: array
          items:
            type: string
            enum:
              - CHIEF_ADMIN
              - CHIEF_CASHIER
              - DISTRIBUTION_OFFICER
              - EXTERNAL
      required:
        - firstName
        - lastName
        - username
    NewUserKeyPair:
      type: object
      title: NewUserKeyPair
      description: Properties necessary to create a new `UserKeyPair`.
      properties:
        keyPairName:
          description: 'The name of the keypair'
          type: string
        userKeyPairPlatform:
          description: >
            The key management platform where the keypair is stored. In DCM environments, only `LEDGER_NANO` is currently
            supported.
          type: string
          enum:
            - GCP_KMS
            - LEDGER_NANO
        publicKey:
          description: >
            The public key of the keypair. Should only be present for new non-custodial keypairs.
            In DCM environments, this property is always required.
          type: string
      required:
        - keyPairName
        - userKeyPairPlatform
    Pageable:
      type: object
      description: Contains information about a page of results that is returned by the API.
      properties:
        offset:
          description: The offset of the returned results. Usually `pageNumber * pageSize`.
          type: integer
          format: int64
        pageNumber:
          description: The number of the page that was returned.
          type: integer
          format: int32
        pageSize:
          description: The number of results returned in the page.
          type: integer
          format: int32
        paged:
          description: Whether or not the result was paged. Always `true`.
          type: boolean
        sort:
          $ref: '#/components/schemas/Sort'
        unpaged:
          description: Whether or not the result was not paged. Always `false`.
          type: boolean
      title: Pageable
    Page:
      type: object
      title: Page
      properties:
        empty:
          description: Whether or not `content` is empty.
          type: boolean
        first:
          description: Whether or not this is the first page of results.
          type: boolean
        last:
          description: Whether or not this is the last page of results.
          type: boolean
        number:
          description: The page number.
          type: integer
          format: int32
        numberOfElements:
          description: The number of results in `content`.
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          description: The number of results in `content`.
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          description: The total number of results across all pages.
          type: integer
          format: int64
        totalPages:
          description: The total number of pages of this size.
          type: integer
          format: int32
    Page<ExternalAccount>:
      type: object
      description: A page of `ExternalAccount`s.
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            content:
              type: array
              description: A list of `ExternalAccount`s.
              items:
                $ref: '#/components/schemas/ExternalAccount'
      title: Page<ExternalAccount>
    Page<AccountEditSummary>:
      type: object
      description: A page of `AccountEditSummary`s.
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            content:
              type: array
              description: A list of `AccountEditSummary`s.
              items:
                $ref: '#/components/schemas/AccountEditSummary'
      title: Page<AccountEditSummary>
    Page<UserAndKeyPairs>:
      type: object
      description: A page of `UserAndKeyPairs`s.
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            content:
              type: array
              description: A list of `UserAndKeyPairs`s.
              items:
                $ref: '#/components/schemas/UserAndKeyPairs'
      title: Page<UserAndKeyPairs>
    Page<WorkItem>:
      type: object
      title: Page of WorkItems
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            content:
              oneOf:
                - $ref: '#/components/schemas/PaymentWorkItem'
                - $ref: '#/components/schemas/GlobalFreezeWorkItem'
                - $ref: '#/components/schemas/IndividualFreezeWorkItem'
    Page<PaymentWorkItem>:
      type: object
      title: Page of Payment requests
      allOf:
        - $ref: '#/components/schemas/Page<WorkItem>'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/PaymentWorkItem'
    Page<GlobalFreezeWorkItem>:
      type: object
      title: Page of Global Freeze requests
      allOf:
        - $ref: '#/components/schemas/Page<WorkItem>'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/GlobalFreezeWorkItem'
    Page<IndividualFreezeWorkItem>:
      type: object
      title: Page of Individual Freeze requests
      allOf:
        - $ref: '#/components/schemas/Page<WorkItem>'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/IndividualFreezeWorkItem'
    UserToken:
      type: object
      title: UserToken
      properties:
        userToken:
          type: string
          format: uuid
        tokenIssued:
          type: string
          format: instant
        tokenExpiration:
          type: string
          format: instant
      required:
        - userToken
        - tokenIssued
        - tokenExpiration
    Meta:
      type: object
      title: Meta
      properties:
        url:
          type: string
          format: httpurl
        applicationUuidV4:
          type: string
          format: uuid
        payloadUuidV4:
          type: string
          format: uuid
      required:
        - url
        - applicationUuidV4
        - payloadUuidV4
    CustomMeta:
      type: object
      title: CustomMeta
      properties:
        identifier:
          type: string
          format: uuid
        blob:
          type: string
        instruction:
          type: string
    PayloadCallback:
      type: object
      title: PayloadCallback
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        customMeta:
          $ref: '#/components/schemas/CustomMeta'
        payloadResponse:
          $ref: '#/components/schemas/PayloadCallbackResponse'
        userToken:
          $ref: '#/components/schemas/UserToken'
      required:
        - meta
        - customMeta
        - payloadResponse
        - userToken
    PayloadCallbackResponse:
      type: object
      title: PayloadCallbackResponse
      properties:
        payloadUuidV4:
          type: string
          format: uuid
        referenceCallUuidV4:
          type: string
          format: uuid
        signed:
          type: boolean
        userToken:
          type: boolean
        returnUrl:
          $ref: '#/components/schemas/ReturnUrl'
      required:
        - payloadUuidV4
        - referenceCallUuidV4
    ReturnUrl:
      type: object
      title: ReturnUrl
      properties:
        app:
          type: string
          format: httpurl
        web:
          type: string
          format: httpurl
    ServerSettings:
      type: object
      title: ServerSettings
      description: Information about the API server.
      properties:
        version:
          description: The server version.
          type: string
      required:
        - version
    Sort:
      type: object
      description: Sorting properties for paged results.
      properties:
        empty:
          description: Whether or not the results are sorted. Equivalent to `unsorted`.
          type: boolean
        sorted:
          description: Whether or not the results are sorted. Equivalent to `!empty`.
          type: boolean
        unsorted:
          description: Whether or not the results are sorted. Equivalent to `empty`.
          type: boolean
      title: Sort
    Tenant:
      type: object
      title: Tenant
      description: >
        A tenant in the CBDC Manager. All data in the application belongs to a Tenant which allows
        multiple customers to use the Manager without the need for multiple server instances, while
        maintaining data privacy between customers.
      properties:
        tenantId:
          description: The unique ID of the tenant.
          type: string
          format: uuid
        name:
          description: The name of the tenant.
          type: string
        urlPath:
          description: Deprecated. The URL path of the tenant. This property is unused.
          type: string
      required:
        - tenantId
        - name
        - urlPath
    TenantAndAdmin:
      type: object
      title: TenantAndAdmin
      description: The `Tenant` and Chief Admin `User` that are created when a new tenant is created.
      properties:
        tenant:
          $ref: '#/components/schemas/Tenant'
        admin:
          $ref: '#/components/schemas/User'
      required:
        - tenant
        - admin
    TenantWideCbdcAccountBalances:
      type: object
      description: >
        Contains issued currency balances by account as well as by account type for a given `Tenant`.
      properties:
        ledgerIndex:
          description: The XRPL ledger index associated with the balances returned
          type: integer
        balances:
          type: object
          description: A map of XRPL address to a map of currency code to balance
          additionalProperties:
            type: object
            additionalProperties:
              type: string
          example:
            r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu:
              USD: 100000
              EUR: 1200
            rwPbLSqTDYwvCsGZEzDTNo3SgzCwEjQdWZ:
              USD: 10020
        typeBalances:
          type: object
          description: A map of balances by currency code for each CBDC Account type
          additionalProperties:
            type: object
            additionalProperties:
              type: string
          example:
            ISSUER:
              USD: 1000
              EUR: 500
            STANDBY:
              USD: 700
            OPERATIONAL:
              USD: 500
            EXTERNAL:
              USD: 50000
      required:
        - ledgerIndex
    User:
      type: object
      description: A user of the CBDC Manager.
      properties:
        userId:
          description: The `User`'s unique ID.
          type: string
          format: uuid
        firstName:
          description: The `User`'s first name.
          type: string
        lastName:
          description: The `User`'s last name.
          type: string
        username:
          description: The `User`'s email address.
          type: string
          format: email
        tenant:
          $ref: '#/components/schemas/Tenant'
        tenantId:
          description: The ID of the `Tenant` that the user belongs to. Shortcut for `tenant.tenantId`.
          type: string
          format: uuid
        authorities:
          description: The roles that this `User` has been granted.
          type: array
          items:
            type: string
            enum:
              - CHIEF_ADMIN
              - CHIEF_CASHIER
              - DISTRIBUTION_OFFICER
              - EXTERNAL
      required:
        - firstName
        - lastName
        - username
        - userId
        - tenant
    UserAndKeyPairs:
      type: object
      description: A `User` and the `UserKeyPair`s that they own.
      properties:
        user:
          $ref: '#/components/schemas/User'
        keyPairs:
          type: array
          description: A list of the `UserKeyPair`s that the user owns.
          items:
            $ref: '#/components/schemas/UserKeyPair'
      required:
        - user
    UserKeyPair:
      type: object
      description: >
        A public/private keypair that a `User` can use to sign WorkItems. The key pair must be generated
        using an XRPL compliant algorithm. Currently, the XRPL supports SECP256k1 and ED25519 keys.
      properties:
        userKeyPairId:
          description: The unique ID of this `UserKeyPair`.
          type: string
          format: uuid
        userId:
          description: The ID of the `User` who owns this keypair.
          type: string
          format: uuid
        publicKey:
          description: The Public Key of this key pair.
          example: 02C69C9DDEE86B0DC46DA4115709C96379E3A67D2026D5FAEE9C56F6E74490DA2B
          type: string
        address:
          description: The XRPL Address of this key pair.
          example: r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu
          type: string
        platform:
          description: >
            The key management platform where the keypair is stored. In DCM environments, only `LEDGER_NANO` is currently
            supported.
          type: string
          enum:
            - GCP_KMS
            - LEDGER_NANO
        creationStatus:
          description: >
            A status indicating whether the key pair was successfully created, is currently being created, or was not able
            to be created. Tracking this status is only necessary for keypairs custodied by Ripple, as creating a key pair
            in Ripple's custody system is an asynchronous task. All non-custodial keypairs will always be in the `CREATED`
            state.
          type: string
          enum:
            - PENDING
            - CREATED
            - FAILED
        isActive:
          description: Whether or not this key pair is active.
          type: boolean
        errorMessage:
          description: A message indicating why the key pair's creation failed. Only present if `creationStatus` is `FAILED`.
          type: string
        name:
          description: The name of the key pair. This must be unique for a given `User`, but does not need to be globally unique.
          type: string
        tenantId:
          description: The ID of the `Tenant` that this key pair belongs to.
          type: string
          format: uuid
        createdAt:
          description: The date and time that the key pair was created in the CBDC Manager.
          type: string
          format: date-time
        updatedAt:
          description: The date and time that the key pair was last updated.
          type: string
          format: date-time
      required:
        - userKeyPairId
        - userId
        - platform
        - createdAt
        - creationStatus
        - name
        - isActive
        - tenantId
        - updatedAt
    WorkItem:
      type: object
      title: WorkItem
      description: >
        Base type for the abstraction of different kinds of transactions to be applied to the XRP Ledger after
        receiving the signatures required to make the transactions eligible for submission.
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the WorkItem.
        status:
          type: string
          description: >
            #### QUEUED

            Indicates the WorkItem is waiting to be eligible to receive signatures.

            #### PENDING_SIGNATURES

            Indicates the WorkItem is eligible to receive signatures for its transactions but they cannot be
            submitted to the XRP Ledger yet.

            #### READY_FOR_SUBMISSION

            Indicates the WorkItem has received the required signatures for its transactions and they are ready to
            be submitted to the XRP Ledger.

            #### SUBMITTED

            Indicates the WorkItem has had its transactions submitted to the XRP Ledger but they have not been
            finalized yet.

            #### COMPLETE

            Indicates the WorkItem's transactions have been successfully finalized on the XRP Ledger.

            #### FAILED

            Indicates one or more of the WorkItem's transactions have not been successfully finalized on the XRP
            Ledger.

            #### CANCELLED

            Indicates the WorkItem has been cancelled.

            #### EXPIRED

            Indicates too much time has passed since the WorkItem became eligible for signatures and it will not be
            able to be finalized successfully due to the ledger sequence number being too far in the past.
          enum:
            - QUEUED
            - PENDING_SIGNATURES
            - READY_FOR_SUBMISSION
            - SUBMITTED
            - COMPLETE
            - FAILED
            - CANCELLED
            - EXPIRED
        sourceAccount:
          type: string
          format: uuid
          description: >
            The ID of the source account within the DCM application.
        lastLedgerSequenceOffset:
          type: integer
          format: uint32
          description: >
            The number of ledgers that will be added to the current ledger sequence at the time of transaction field
            finalization to each of the transactions.
        createdBy:
          type: string
          format: uuid
          description: >
            The ID of the user who created the WorkItem.
        createdAt:
          type: string
          format: LocalDateTime
          description: The date and time this object was created.
        updatedAt:
          type: string
          format: LocalDateTime
          description: The date and time this object was last updated.
        tenantId:
          type: string
          format: uuid
          description: The ID of the tenant this WorkItem belongs to.
      required:
        - id
        - status
        - sourceAccount
        - lastLedgerSequenceOffset
        - createdAt
        - updatedAt
        - tenantId
        - transactions
    AccountSetupWorkItem:
      allOf:
        - $ref: '#/components/schemas/WorkItem'
        - type: object
          properties:
            type:
              type: string
              description: >
                #### ACCOUNT_SETUP_FLAG_SET

                Indicates the WorkItem will alter the flags on the account being configured on the XRP Ledger with
                various settings required by the DCM application.

                #### ACCOUNT_SETUP_TRUST_SET

                Indicates the WorkItem will create trustlines on the account being configured on the XRP Ledger when
                the account is not an issuer.

                #### SIGNER_LIST_SET

                Indicates the WorkItem will alter signer list on the account being configured on the XRP Ledger to
                require multisign behavior.

                #### ACCOUNT_SETUP_DISABLE_MASTER

                Indicates the WorkItem will alter the flags on the account being configured on the XRP Ledger to
                disable the master key in favor of multisigning.
              enum:
                - ACCOUNT_SETUP_FLAG_SET
                - ACCOUNT_SETUP_TRUST_SET
                - SIGNER_LIST_SET
                - ACCOUNT_SETUP_DISABLE_MASTER
            transactions:
              type: array
              description: >
                The transactions required to apply the change to the XRP Ledger.
              items:
                $ref: '#/components/schemas/AccountSetupWorkItemTransaction'
          required:
            - type
            - transactions
    PaymentWorkItem:
      title: Payment WorkItem
      allOf:
        - $ref: '#/components/schemas/WorkItem'
        - type: object
          properties:
            type:
              type: string
              description: >
                #### MINT

                Defines the payment as issuing currency from the issuer account to another account in the sytem.

                #### PAY_TO_STANDBY

                Defines the payment as sending funds to a standby account in the system.

                #### PAY_TO_OPERATIONAL

                Defines the payment as sending funds to an operational account in the system.

                #### PAY_TO_EXTERNAL

                Defines the payment as sending funds to an external account in the system.

                #### DESTROY

                Defines the payment as destroying currency, which involves sending the funds back to the issuer account
                that issued them.
              enum:
                - MINT
                - PAY_TO_OPERATIONAL
                - PAY_TO_STANDBY
                - PAY_TO_EXTERNAL
                - DESTROY
            transactions:
              type: array
              description: >
                The transactions required to apply the change to the XRP Ledger.
              items:
                $ref: '#/components/schemas/PaymentWorkItemTransaction'
          required:
            - type
            - transactions
    GlobalFreezeWorkItem:
      title: Global Freeze WorkItem
      description: >
        Container for an individual freeze or unfreeze transaction.
      allOf:
        - $ref: '#/components/schemas/WorkItem'
        - type: object
          properties:
            type:
              type: string
              description: >
                #### GLOBAL_FREEZE

                Indicates this transaction will freeze all accounts.

                #### GLOBAL_UNFREEZE

                Indicates this transaction will unfreeze all accounts.
              enum:
                - GLOBAL_FREEZE
                - GLOBAL_UNFREEZE
            transactions:
              type: array
              description: >
                The transactions required to apply the change to the XRP Ledger.
              items:
                $ref: '#/components/schemas/GlobalFreezeWorkItemTransaction'
          required:
            - type
            - transactions
    IndividualFreezeWorkItem:
      title: Individual Freeze WorkItem
      description: >
        Container for an individual freeze or unfreeze transaction.
      allOf:
        - $ref: '#/components/schemas/WorkItem'
        - type: object
          properties:
            type:
              type: string
              description: >
                #### INDIVIDUAL_FREEZE

                Indicates this transaction will freeze the associated account.

                #### INDIVIDUAL_UNFREEZE

                Indicates this transaction will unfreeze the associated account.
              enum:
                - INDIVIDUAL_FREEZE
                - INDIVIDUAL_UNFREEZE
            transactions:
              type: array
              description: >
                The transactions required to apply the change to the XRP Ledger.
              items:
                $ref: '#/components/schemas/IndividualFreezeWorkItemTransaction'
          required:
            - type
            - transactions
    WorkItemTransaction:
      type: object
      title: WorkItemTransaction
      description: >
        Abstraction for an XRP Ledger transaction within the DCM application.
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the WorkItem.
        status:
          type: string
          description: >
            #### NON_FINAL

            A transaction that has not yet been finalized on the XRP Ledger.

            #### FINAL_FAILURE

            A transaction that has been finalized on the XRP Ledger with a failure status.

            #### FINAL_SUCCESS

            A transaction that has been finalized on the XRP Ledger with a success status.
          enum:
            - NON_FINAL
            - FINAL_FAILURE
            - FINAL_SUCCESS
        transactionHash:
          type: string
          format: hash256
          description: The hash of the transaction.
        transactionEncoded:
          type: string
          format: base64
          description: The transaction bytes encoded as a hexadecimal string.
        signingMode:
          type: string
          description: >
            #### MULTI

            A transaction that requires multiple signatures to be submitted.

            #### SINGLE

            A transaction that requires a single signature to be submitted.
          enum:
            - MULTI
            - SINGLE
        signatures:
          type: array
          description: >
            A collection of signatures coalesced into the transaction for submission.
          items:
            $ref: '#/components/schemas/WorkItemTransactionSignature'
        quorum:
          type: integer
          format: uint32
          description: >
            The total weight of signatures required to meet the quorum needed to submit the transaction.
        createdAt:
          type: string
          format: LocalDateTime
          description: Date and time this object was created.
        updatedAt:
          type: string
          format: LocalDateType
          description: Date and time this object was last updated.
        tenantId:
          type: string
          format: uuid
          description: The ID of the tenant this transaction belongs to.
      required:
        - id
        - status
        - transactionEncoded
        - quorum
        - createdAt
        - updatedAt
        - tenantId
    AccountSetupWorkItemTransaction:
      type: object
      title: AccountSetupWorkItemTransaction
      description: >
        Used to alter the state of an XRP Ledger account to make it usable within the DCM system.
      allOf:
        - $ref: '#/components/schemas/WorkItemTransaction'
        - type: object
          properties:
            transaction:
              oneOf:
                - $ref: '#/components/schemas/AccountSet'
                - $ref: '#/components/schemas/TrustSet'
                - $ref: '#/components/schemas/SignerListSet'
              discriminator:
                propertyName: TransactionType
          required:
            - transaction
    PaymentWorkItemTransaction:
      type: object
      title: PaymentWorkItemTransaction
      description: >
        Used to send a payment between two accounts.
      allOf:
        - $ref: '#/components/schemas/WorkItemTransaction'
        - type: object
          properties:
            transaction:
              $ref: '#/components/schemas/Payment'
          required:
            - transaction
    GlobalFreezeWorkItemTransaction:
      type: object
      title: GlobalFreezeWorkItemTransaction
      description: >
        Used to freeze or unfreeze all accounts in the system, disabling or reenabling movement of funds.
      allOf:
        - $ref: '#/components/schemas/WorkItemTransaction'
        - type: object
          properties:
            transaction:
              $ref: '#/components/schemas/AccountSet'
          required:
            - transaction
    IndividualFreezeWorkItemTransaction:
      type: object
      title: IndividualFreezeWorkItemTransaction
      description: >
        Used to freeze or unfreeze an individual account in the system, disabling or reenabling movement of funds.
      allOf:
        - $ref: '#/components/schemas/WorkItemTransaction'
        - type: object
          properties:
            transaction:
              $ref: '#/components/schemas/TrustSet'
          required:
            - transaction
    XrplTransaction:
      type: object
      title: XrplTransaction
      properties:
        Account:
          type: string
          description: 'The source address of the transaction'
        TransactionType:
          type: string
          description: >
            The type of transaction. Valid types include: Payment, OfferCreate, OfferCancel, TrustSet, AccountSet,
            AccountDelete, SetRegularKey, SignerListSet, EscrowCreate, EscrowFinish, EscrowCancel,
            PaymentChannelCreate, PaymentChannelFund, PaymentChannelClaim, and DepositPreauth.
        Fee:
          type: integer
          format: uint64
          description: >
            Integer amount of XRP, in drops, to be destroyed as a cost for distributing this transaction to the
            network. Some transaction types have different minimum requirements.
        Sequence:
          type: integer
          format: uint32
          description: >
            The sequence number of the account sending the transaction. A transaction is only valid if the
            Sequence number is exactly 1 greater than the previous transaction from the same account. The
            special case 0 means the transaction is using a Ticket instead (Added by the TicketBatch
            amendment.).
        Flags:
          type: integer
          format: uint32
          description: Set of bit-flags for this transaction.
        TicketSequence:
          type: integer
          format: unt32
          description: >
            The sequence number of the ticket to use in place of a Sequence number. If this is provided,
            Sequence must be 0. Cannot be used with AccountTxnID.
        AccountTxnID:
          type: string
          description: >
            Hash value identifying another transaction. If provided, this transaction is only valid if
            the sending account's previously-sent transaction matches the provided hash.
        LastLedgerSequence:
          type: integer
          format: uint32
          description: >
            Highest ledger index this transaction can appear in. Specifying this field places a strict
            upper limit on how long the transaction can wait to be validated or rejected.
        Memos:
          type: array
          description: Additional arbitrary information used to identify this transaction.
          items:
            type: object
            properties:
              Memo:
                type: object
                properties:
                  MemoData:
                    type: string
                    description: >
                      Arbitrary hex value, conventionally containing the content of the memo.
                  MemoFormat:
                    type: string
                    description: >
                      Hex value representing characters allowed in URLs. Conventionally containing information on how
                      the memo is encoded, for example as a MIME type .
                  MemoType:
                    type: string
                    description: >
                      Hex value representing characters allowed in URLs. Conventionally, a unique relation (according
                      to RFC 5988 ) that defines the format of this memo.
            required:
              - memo
        Signers:
          type: array
          description: Array of objects that represent a multi-signature which authorizes this transaction.
          items:
            type: object
            properties:
              Signer:
                type: object
                properties:
                  Account:
                    type: string
                    description: >
                      The address associated with this signature, as it appears in the signer list.
                  TxnSignature:
                    type: string
                    description: >
                      A signature for this transaction, verifiable using the SigningPubKey.
                  SigningPubKey:
                    type: string
                    description: >
                      The public key used to create this signature.
        SourceTag:
          type: integer
          format: uin32
          description: >
            Arbitrary integer used to identify the reason for this payment, or a sender on whose behalf this
            transaction is made. Conventionally, a refund should specify the initial payment's SourceTag as the
            refund payment's DestinationTag.
        SigningPubKey:
          type: string
          description: >
            Hex representation of the public key that corresponds to the private key used to sign this transaction.
            If an empty string, indicates a multi-signature is present in the Signers field instead.
        TxnSignature:
          type: string
          description: >
            The signature that verifies this transaction as originating from the account it says it is from.
      required:
        - Account
        - TransactionType
        - Fee
        - Sequence
    AccountSet:
      type: object
      title: AccountSet
      description: 'An XRPL `AccountSet` transaction. The flags that get set by this transaction depend on the type of WorkItem that creates it.'
      allOf:
        - $ref: '#/components/schemas/XrplTransaction'
        - type: object
          properties:
            ClearFlag:
              type: string
              description: Unique identifier of a flag to disable for this account.
              enum:
                - REQUIRE_DEST
                - REQUIRE_AUTH
                - DISALLOW_XRP
                - DISABLE_MASTER
                - ACCOUNT_TXN_ID
                - NO_FREEZE
                - DEFAULT_RIPPLE
                - DEPOSIT_AUTH
            SetFlag:
              type: string
              description: Integer flag to enable for this account.
              enum:
                - REQUIRE_DEST
                - REQUIRE_AUTH
                - DISALLOW_XRP
                - DISABLE_MASTER
                - ACCOUNT_TXN_ID
                - NO_FREEZE
                - DEFAULT_RIPPLE
                - DEPOSIT_AUTH
            Domain:
              type: string
              description: >
                The domain that owns this account, as a string of hex representing the ASCII for the domain in
                lowercase. Cannot be more than 256 bytes in length.
            EmailHash:
              type: string
              description: >
                Hash of an email address to be used for generating an avatar image. Conventionally, clients use
                Gravatar  to display this image.
            MessageKey:
              type: string
              description: >
                Public key for sending encrypted messages to this account. To set the key, it must be exactly 33
                bytes, with the first byte indicating the key type: 0x02 or 0x03 for secp256k1 keys, 0xED for
                Ed25519 keys. To remove the key, use an empty value.
            TransferRate:
              type: integer
              format: uint32
              description: >
                The fee to charge when users transfer this account's tokens, represented as billionths of a unit.
                Cannot be more than 2000000000 or less than 1000000000, except for the special case 0 meaning no fee.
            TickSize:
              type: integer
              format: uint32
              description: >
                Tick size to use for offers involving a currency issued by this address. The exchange rates of those
                offers is rounded to this many significant digits. Valid values are 3 to 15 inclusive, or 0 to disable.
          required:
            - Flags
    IssuedCurrencyAmount:
      type: object
      title: IssuedCurrencyAmount
      properties:
        value:
          type: string
          description: >
            The amount of the issued currency.
        currency:
          type: string
          description: >
            The currency code associated with the amount. Cannot be `XRP`.
          example: USD
        issuer:
          type: string
          description: >
            Address of the issuer account used for this issued currency.
          example: r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu
      required:
        - value
        - currency
        - issuer
    TrustSet:
      type: object
      title: TrustSet
      description: 'An XRPL `TrustSet` transaction which creates or modifies a trustline between two accounts'
      allOf:
        - $ref: '#/components/schemas/XrplTransaction'
        - type: object
          properties:
            LimitAmount:
              $ref: '#/components/schemas/IssuedCurrencyAmount'
            QualityIn:
              type: number
              format: uint32
              description: >
                Value incoming balances on this trust line at the ratio of this number per 1,000,000,000 units. A value
                of 0 is shorthand for treating balances at face value.
            QualityOut:
              type: number
              format: uint32
              description: >
                Value outgoing balances on this trust line at the ratio of this number per 1,000,000,000 units. A value
                of 0 is shorthand for treating balances at face value.
          required:
            - LimitAmount
    SignerListSet:
      type: object
      title: SignerListSet
      description: 'An XRPL `SignerListSet` transaction to set a SignerList on an account'
      allOf:
        - $ref: '#/components/schemas/XrplTransaction'
        - type: object
          properties:
            SignerQuorum:
              type: integer
              format: uint32
              description: >
                The total weight of signatures required to be able to submit the transaction.
            SignerEntries:
              type: object
              properties:
                SignerEntry:
                  type: object
                  properties:
                    Account:
                      type: string
                      description: >
                        The account on the XRP Ledger being used to sign.
                    SignerWeight:
                      type: integer
                      format: uint32
                      description: >
                        The weight applied towards the quorum for a signature from this signer.
                  required:
                    - Account
                    - SignerWeight
              required:
                - SignerEntry
          required:
            - SignerQuorum
            - SignerEntries
    Payment:
      type: object
      title: Payment
      description: 'An XRPL `Payment` transaction'
      allOf:
        - $ref: '#/components/schemas/XrplTransaction'
        - type: object
          properties:
            Amount:
              $ref: '#/components/schemas/IssuedCurrencyAmount'
            Destination:
              type: string
            DestinationTag:
              type: integer
              format: uint32
            InvoiceID:
              type: string
            SendMax:
              $ref: '#/components/schemas/IssuedCurrencyAmount'
            DeliverMin:
              $ref: '#/components/schemas/IssuedCurrencyAmount'
    WorkItemSignature:
      type: object
      title: WorkItemSignature
      description: A wrapper for a Signature specific to non-AccountSetup and non-AccountEdit WorkItems.
      properties:
        signature:
          description: The Base16 encoded signature of the WorkItem's transaction.
          type: string
          format: base16
      required:
        - signature
    WorkItemTransactionSignature:
      type: object
      title: WorkItemTransactionSignature
      description: >
        A signature for a WorkItem. A collection of one or more signatures are used in aggregate in order to submit a
        transaction associated with a WorkItem to the XRP Ledger.
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the signature.
        userId:
          type: string
          format: uuid
          description: The ID of the user associated with this signature.
        userKeyPairId:
          type: string
          format: uuid
          description: The ID of the key pair of the user used for this signature.
        address:
          type: string
          description: An XRPL address.
          example: r4dgY6Mzob3NVq8CFYdEiPnXKboRScsXRu
        publicKey:
          type: string
          description: A base16 encoded public key.
          example: EDBA8EC5A7F0681998A54C00AB4A9804D797B471102382A2CDFE45313E49807C6E
        signatureWeight:
          description: >
            A number indicating the weight applied to the quorum by this signature.
          type: integer
          format: uint32
        status:
          type: string
          enum:
            - PENDING
            - SEND_FOR_SIGNING
            - SIGNED
            - FAILED
        signature:
          type: string
          format: base16
          description: The hex-encoded transaction signature.
        createdAt:
          type: string
          format: LocalDateTime
          description: The date and time that the signature was created.
        updatedAt:
          type: string
          format: LocalDateTime
          description: The date and time that the signature was last updated.
        tenantId:
          type: string
          format: uuid
          description: The ID of the tenant that the signature belongs to.
      required:
        - id
        - userId
        - userKeyPairId
        - address
        - publicKey
        - signatureWeight
        - status
        - createdAt
        - updatedAt
        - tenantId
    OAuthUsernamePassword:
      type: object
      title: OAuthUsernamePassword
      description: >
        Used for sending credentials associated with OAuth for password based authentication.
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
